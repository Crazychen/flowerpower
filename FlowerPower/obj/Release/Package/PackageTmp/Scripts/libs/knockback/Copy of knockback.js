var Backbone, Knockback, kb, ko, _; if (typeof exports !== "undefined") { Knockback = kb = exports } else { this.Knockback = this.kb = {} } Knockback.VERSION = "0.15.1"; _ = !this._ && typeof require !== "undefined" ? require("underscore") : this._; Backbone = !this.Backbone && typeof require !== "undefined" ? require("backbone") : this.Backbone; ko = !this.ko && typeof require !== "undefined" ? require("knockout") : this.ko; Knockback.locale_manager; Knockback.stats = { collection_observables: 0, view_models: 0 }; Knockback.stats_on = false; Knockback.utils = {}; Knockback.utils.legacyWarning = function (a, b, c) { var d; kb._legacy_warnings || (kb._legacy_warnings = {}); (d = kb._legacy_warnings)[a] || (d[a] = 0); kb._legacy_warnings[a]++; return console.warn("Legacy warning! '" + a + "' has been deprecated (will be removed in Knockback " + b + "). " + c + ".") }; Knockback.utils.wrappedObservable = function (a, b) { if (arguments.length === 1) { if (!(a && a.__kb && a.__kb.observable)) { throw new Error("Knockback: instance is not wrapping an observable") } return a.__kb.observable } if (!a) { throw new Error("Knockback: no instance for wrapping a observable") } a.__kb || (a.__kb = {}); if (a.__kb.observable && a.__kb.observable.__kb) { a.__kb.observable.__kb.instance = null } a.__kb.observable = b; if (b) { b.__kb || (b.__kb = {}); b.__kb.instance = a } return b }; Knockback.wrappedObservable = function (a) { kb.utils.legacyWarning("kb.wrappedObservable", "0.16.0", "Please use kb.utils.wrappedObservable instead"); return kb.utils.wrappedObservable(a) }; Knockback.utils.observableInstanceOf = function (a, b) { if (!a) { return false } if (!(a.__kb && a.__kb.instance)) { return false } return a.__kb.instance instanceof b }; Knockback.utils.wrappedModel = function (a, b) { if (arguments.length === 1) { if (a && a.__kb && a.__kb.hasOwnProperty("model")) { return a.__kb.model } else { return a } } if (!a) { throw new Error("Knockback: no view_model for wrapping a model") } a.__kb || (a.__kb = {}); a.__kb.model = b; return b }; Knockback.viewModelGetModel = Knockback.vmModel = function (a) { kb.utils.legacyWarning("kb.vmModel", "0.16.0", "Please use kb.utils.wrappedModel instead"); return kb.utils.wrappedModel(a) }; Knockback.utils.setToDefault = function (a) { var b, c, d; if (!a) { return } if (ko.isObservable(a)) { return typeof a.setToDefault === "function" ? a.setToDefault() : void 0 } else if (_.isObject(a)) { d = []; for (b in a) { c = a[b]; d.push(c && b !== "__kb" ? kb.utils.setToDefault(c) : void 0) } return d } }; Knockback.vmSetToDefault = function (a) { kb.utils.legacyWarning("kb.vmSetToDefault", "0.16.0", "Please use kb.utils.release instead"); return kb.utils.setToDefault(a) }; Knockback.utils.release = function (a) { var b, c; if (!a) { return false } if (ko.isObservable(a) || a instanceof kb.Observables || typeof a.release === "function" || typeof a.destroy === "function") { if (a.release) { a.release() } else if (a.destroy) { a.destroy() } else if (a.dispose) { a.dispose() } return true } else if (_.isObject(a) && !(typeof a === "function")) { for (b in a) { c = a[b]; if (!c || b === "__kb") { continue } if (kb.utils.release(c)) { a[b] = null } } return true } return false }; Knockback.vmRelease = function (a) { kb.utils.legacyWarning("kb.vmRelease", "0.16.0", "Please use kb.utils.release instead"); return kb.utils.release(a) }; Knockback.vmReleaseObservable = function (a) { kb.utils.legacyWarning("kb.vmReleaseObservable", "0.16.0", "Please use kb.utils.release instead"); return kb.utils.release(a) }; kb.utils.optionsCreateClear = function (a) { delete a["create"]; delete a["children"]; delete a["view_model"]; return delete a["view_model_create"] }; kb.utils.optionsCreateOverride = function (a, b) { kb.utils.optionsCreateClear(a); return _.extend(a, b) }; Knockback.RefCountable = function () { function a() { this.__kb || (this.__kb = {}); this.__kb.ref_count = 1 } a.name = "RefCountable"; a.extend = Backbone.Model.extend; a.prototype.__destroy = function () { }; a.prototype.retain = function () { if (this.__kb.ref_count <= 0) { throw new Error("RefCountable: ref_count is corrupt: " + this.__kb.ref_count) } this.__kb.ref_count++; return this }; a.prototype.release = function () { if (this.__kb.ref_count <= 0) { throw new Error("RefCountable: ref_count is corrupt: " + this.__kb.ref_count) } this.__kb.ref_count--; if (!this.__kb.ref_count) { this.__destroy() } return this }; a.prototype.refCount = function () { return this.__kb.ref_count }; return a }(); Knockback.Store = function () { function a() { this.keys = []; this.values = [] } a.name = "Store"; a.prototype.destroy = function () { var a, b, c, d; this.keys = null; c = this.values; for (a in c) { b = c[a]; if (!kb.utils.observableInstanceOf(b, kb.CollectionObservable)) { continue } this.values[a] = null; while (b.refCount() > 0) { b.release() } } d = this.values; for (a in d) { b = d[a]; if (!b) { continue } this.values[a] = null; if (b instanceof kb.RefCountable) { while (b.refCount() > 0) { b.release() } } else { kb.utils.release(b) } } return this.values = null }; a.prototype.registerValue = function (a, b) { var c; if (b instanceof kb.RefCountable) { b.retain() } c = _.indexOf(this.keys, a); if (c >= 0) { this.values[c] = b } else { this.keys.push(a); this.values.push(b) } return b }; a.prototype.resolveValue = function (a, b, c) { var d, e; d = _.indexOf(this.keys, a); if (d >= 0) { if (this.values[d]) { if (this.values[d] instanceof kb.RefCountable && this.values[d].refCount() <= 0) { this.values[d] = null } else { if (this.values[d] instanceof kb.RefCountable) { return this.values[d].retain() } else { return this.values[d] } } } } else { d = this.keys.length; this.keys.push(a); this.values.push(void 0) } e = b.apply(null, Array.prototype.slice.call(arguments, 2)); if (this.keys[d] !== a) { this.registerValue(a, e) } else if (!this.values[d]) { if (e instanceof kb.RefCountable) { e.retain() } this.values[d] = e } return e }; a.prototype.releaseValue = function (a) { var b; if (!(a instanceof kb.RefCountable)) { return } a.release(); if (a.refCount() > 0) { return } b = _.indexOf(this.values, a); if (!(b >= 0)) { return } return this.values[b] = 0 }; a.prototype.addResolverToOptions = function (a, b) { return _.extend(a, { store: this, store_key: b }) }; a.resolveFromOptions = function (a, b) { if (!(a.store && a.store_key)) { return } return a.store.registerValue(a.store_key, b) }; return a }(); var __hasProp = {}.hasOwnProperty, __extends = function (a, b) { function d() { this.constructor = a } for (var c in b) { if (__hasProp.call(b, c)) a[c] = b[c] } d.prototype = b.prototype; a.prototype = new d; a.__super__ = b.prototype; return a }; Knockback.CollectionObservable = function (a) { function b(a, c) { var d, e, f = this; if (c == null) { c = {} } if (!a) { throw new Error("CollectionObservable: collection is missing") } b.__super__.constructor.apply(this, arguments); if (Knockback.stats_on) { kb.stats.collection_observables++ } if (ko.isObservable(c) && c.hasOwnProperty("indexOf")) { kb.utils.legacyWarning("kb.collectionObservable with an external ko.observableArray", "0.16.0", "Please use the kb.collectionObservable directly instead of passing a ko.observableArray"); e = kb.utils.wrappedObservable(this, c); c = arguments[2] || {}; d = true } else { e = kb.utils.wrappedObservable(this, ko.observableArray([])) } if (!c.store_skip_resolve) { kb.Store.resolveFromOptions(c, kb.utils.wrappedObservable(this)) } if (c.store) { this.__kb.store = c.store } else { this.__kb.store = new kb.Store; this.__kb.store_is_owned = true } if (c.hasOwnProperty("view_model")) { if (!c.view_model) { throw new Error("Knockback.CollectionObservable: options.view_model is empty") } this.view_model_create_fn = c.view_model; this.view_model_create_with_new = true } else if (c.hasOwnProperty("view_model_constructor")) { if (!c.view_model_constructor) { throw new Error("Knockback.CollectionObservable: options.view_model_constructor is empty") } kb.utils.legacyWarning("kb.collectionObservable option view_model_constructor", "0.16.0", "Please use view_model option instead"); this.view_model_create_fn = c.view_model_constructor; this.view_model_create_with_new = true } else if (c.hasOwnProperty("view_model_create")) { if (!c.view_model_create) { throw new Error("Knockback.CollectionObservable: options.view_model_create is empty") } this.view_model_create_fn = c.view_model_create } else if (c.hasOwnProperty("create")) { if (!c.create) { throw new Error("Knockback.CollectionObservable: options.create is empty") } this.view_model_create_fn = c.create } this.sort_attribute = c.sort_attribute; this.sorted_index = c.sorted_index; this.__kb._onCollectionReset = _.bind(this._onCollectionReset, this); this.__kb._onCollectionResort = _.bind(this._onCollectionResort, this); this.__kb._onModelAdd = _.bind(this._onModelAdd, this); this.__kb._onModelRemove = _.bind(this._onModelRemove, this); this.__kb._onModelChange = _.bind(this._onModelChange, this); if (d && a) { a.bind("change", function () { return kb.utils.wrappedObservable(f).valueHasMutated() }) } e.retain = _.bind(this.retain, this); e.refCount = _.bind(this.refCount, this); e.release = _.bind(this.release, this); e.collection = _.bind(this.collection, this); e.viewModelByModel = _.bind(this.viewModelByModel, this); e.sortedIndex = _.bind(this.sortedIndex, this); e.sortAttribute = _.bind(this.sortAttribute, this); e.hasViewModels = _.bind(this.hasViewModels, this); e.bind = _.bind(this.bind, this); e.unbind = _.bind(this.unbind, this); e.trigger = _.bind(this.trigger, this); this.collection(a, { silent: true, defer: c.defer }); return e } __extends(b, a); b.name = "CollectionObservable"; b.prototype.__destroy = function () { this.collection(null); if (this.hasViewModels() && this.__kb.store_is_owned) { this.__kb.store.destroy(); this.__kb.store = null } this.view_model_create_fn = null; this.__kb.collection = null; kb.utils.wrappedObservable(this, null); b.__super__.__destroy.apply(this, arguments); if (Knockback.stats_on) { return kb.stats.collection_observables-- } }; b.prototype.retain = function () { b.__super__.retain.apply(this, arguments); return kb.utils.wrappedObservable(this) }; b.prototype.release = function () { var a; a = kb.utils.wrappedObservable(this); b.__super__.release.apply(this, arguments); return a }; b.prototype.collection = function (a, b) { var c, d, e; c = kb.utils.wrappedObservable(this); if (arguments.length === 0) { c(); return this.__kb.collection } if (a === this.__kb.collection) { return } if (this.__kb.collection) { this._clear(); this._collectionUnbind(this.__kb.collection); if (typeof (d = this.__kb.collection).release === "function") { d.release() } this.__kb.collection = null } this.__kb.collection = a; if (this.__kb.collection) { if (typeof (e = this.__kb.collection).retain === "function") { e.retain() } this._collectionBind(this.__kb.collection); return this.sortedIndex(this.sorted_index, this.sort_attribute, b) } }; b.prototype.sortedIndex = function (a, b, c) { var d, e = this; if (c == null) { c = {} } if (a) { this.sorted_index = a; this.sort_attribute = b } else if (b) { this.sort_attribute = b; this.sorted_index = this._sortAttributeFn(b) } else { this.sort_attribute = null; this.sorted_index = null } d = function () { var a; a = kb.utils.wrappedObservable(e); if (e.__kb.collection.models.length === 0 && a().length === 0) { return } e._collectionResync(true); if (!c.silent) { return e.trigger("resort", a()) } }; if (c.defer) { _.defer(d) } else { d() } return this }; b.prototype.sortAttribute = function (a, b, c) { return this.sortedIndex(b, a, c) }; b.prototype.viewModelByModel = function (a) { var b, c; if (!this.hasViewModels()) { return null } c = kb.utils.wrappedObservable(this); b = a.hasOwnProperty(a.idAttribute) ? a.idAttribute : "cid"; return _.find(c(), function (c) { return c.__kb.model[b] === a[b] }) }; b.prototype.hasViewModels = function () { return !!this.view_model_create_fn }; b.prototype._collectionBind = function (a) { var b, c, d, e, f, g, h; if (!a) { return } a.bind("reset", this.__kb._onCollectionReset); if (!this.sorted_index) { a.bind("resort", this.__kb._onCollectionResort) } g = ["new", "add"]; for (c = 0, e = g.length; c < e; c++) { b = g[c]; a.bind(b, this.__kb._onModelAdd) } h = ["remove", "destroy"]; for (d = 0, f = h.length; d < f; d++) { b = h[d]; a.bind(b, this.__kb._onModelRemove) } return a.bind("change", this.__kb._onModelChange) }; b.prototype._collectionUnbind = function (a) { var b, c, d, e, f, g, h; if (!a) { return } a.unbind("reset", this.__kb._onCollectionReset); if (!this.sorted_index) { a.unbind("resort", this.__kb._onCollectionResort) } g = ["new", "add"]; for (c = 0, e = g.length; c < e; c++) { b = g[c]; a.unbind(b, this.__kb._onModelAdd) } h = ["remove", "destroy"]; for (d = 0, f = h.length; d < f; d++) { b = h[d]; a.unbind(b, this.__kb._onModelRemove) } return a.unbind("change", this.__kb._onModelChange) }; b.prototype._onCollectionReset = function () { return this._collectionResync() }; b.prototype._onCollectionResort = function (a) { var b; if (this.sorted_index) { throw new Error("CollectionObservable: collection sorted_index unexpected") } if (_.isArray(a)) { b = kb.utils.wrappedObservable(this); return this.trigger("resort", b()) } else { return this._onModelResort(a) } }; b.prototype._onModelAdd = function (a) { var b, c, d; d = this.hasViewModels() ? this._createTarget(a) : a; c = kb.utils.wrappedObservable(this); if (this.sorted_index) { b = this.sorted_index(c(), d) } else { b = this.__kb.collection.indexOf(a) } c.splice(b, 0, d); return this.trigger("add", d, c()) }; b.prototype._onModelRemove = function (a) { var b, c; c = this.hasViewModels() ? this.viewModelByModel(a) : a; if (!c) { return } b = kb.utils.wrappedObservable(this); b.remove(c); this.trigger("remove", c, b); if (this.hasViewModels()) { return this.__kb.store.releaseValue(c) } }; b.prototype._onModelChange = function (a) { if (this.sorted_index && (!this.sort_attribute || a.hasChanged(this.sort_attribute))) { return this._onModelResort(a) } }; b.prototype._onModelResort = function (a) { var b, c, d, e, f; c = kb.utils.wrappedObservable(this); f = this.hasViewModels() ? this.viewModelByModel(a) : a; d = c.indexOf(f); if (this.sorted_index) { e = _.clone(c()); e.splice(d, 1); b = this.sorted_index(e, f) } else { b = this.__kb.collection.indexOf(a) } if (d === b) { return } c.splice(d, 1); c.splice(b, 0, f); return this.trigger("resort", f, c(), b) }; b.prototype._clear = function (a) { var b, c, d, e, f, g; b = kb.utils.wrappedObservable(this); if (!a) { this.trigger("remove", b()) } d = b.removeAll(); if (this.hasViewModels()) { g = []; for (e = 0, f = d.length; e < f; e++) { c = d[e]; g.push(this.__kb.store.releaseValue(c)) } return g } }; b.prototype._collectionResync = function (a) { var b, c, d, e, f, g, h, i, j = this; this._clear(a); d = kb.utils.wrappedObservable(this); if (this.sorted_index) { f = []; i = this.__kb.collection.models; for (g = 0, h = i.length; g < h; g++) { c = i[g]; e = this._createTarget(c); b = this.sorted_index(f, e); f.splice(b, 0, e) } } else { f = this.hasViewModels() ? _.map(this.__kb.collection.models, function (a) { return j._createTarget(a) }) : _.clone(this.__kb.collection.models) } d(f); if (!a) { return this.trigger("add", d()) } }; b.prototype._sortAttributeFn = function (a) { if (this.hasViewModels()) { return function (b, c) { return _.sortedIndex(b, c, function (b) { return kb.utils.wrappedModel(b).get(a) }) } } else { return function (b, c) { return _.sortedIndex(b, c, function (b) { return b.get(a) }) } } }; b.prototype._createTarget = function (a) { var b, c = this; b = function () { var b, d, e; d = c.__kb.store.addResolverToOptions({}, a); b = kb.utils.wrappedObservable(c); e = c.view_model_create_with_new ? new c.view_model_create_fn(a, d, b) : c.view_model_create_fn(a, d, b); kb.utils.wrappedModel(e, a); return e }; if (this.hasViewModels()) { return this.__kb.store.resolveValue(a, b) } else { return a } }; return b }(kb.RefCountable); __extends(Knockback.CollectionObservable.prototype, Backbone.Events); Knockback.collectionObservable = function (a, b, c) { return new Knockback.CollectionObservable(a, b, c) }; Knockback.sortedIndexWrapAttr = Knockback.siwa = function (a, b) { return function (c, d) { return _.sortedIndex(c, d, function (c) { return new b(kb.utils.wrappedModel(c).get(a)) }) } }; if (!this.Knockback) { throw new Error("Knockback: Dependency alert! knockback_core.js must be included before this file") } Knockback.DefaultWrapper = function () { function a(a, b) { var c, d = this; this.default_value_observable = b; this.__kb = {}; c = kb.utils.wrappedObservable(this, ko.dependentObservable({ read: function () { var b, c; c = ko.utils.unwrapObservable(a()); b = ko.utils.unwrapObservable(d.default_value_observable); if (!c) { return b } else { return c } }, write: function (b) { return a(b) } })); c.destroy = _.bind(this.destroy, this); c.setToDefault = _.bind(this.setToDefault, this); return c } a.name = "DefaultWrapper"; a.prototype.destroy = function () { kb.utils.wrappedObservable(this, null); return this.default_value = null }; a.prototype.setToDefault = function () { var a; a = kb.utils.wrappedObservable(this); return a(this.default_value_observable) }; return a }(); Knockback.defaultWrapper = function (a, b) { return new Knockback.DefaultWrapper(a, b) }; Knockback.toFormattedString = function (a) { var b, c, d, e, f, g; f = a.slice(); c = Array.prototype.slice.call(arguments, 1); for (d in c) { b = c[d]; g = ko.utils.unwrapObservable(b); if (!g) { g = "" } e = a.indexOf("{" + d + "}"); while (e >= 0) { f = f.replace("{" + d + "}", g); e = a.indexOf("{" + d + "}", e + 1) } } return f }; Knockback.parseFormattedString = function (a, b) { var c, d, e, f, g, h, i, j, k, l, m, n, o, p; l = b.slice(); e = 0; h = 0; j = {}; while (l.search("\\{" + e + "\\}") >= 0) { i = b.indexOf("{" + e + "}"); while (i >= 0) { l = l.replace("{" + e + "}", "(.*)"); j[i] = e; h++; i = b.indexOf("{" + e + "}", i + 1) } e++ } c = e; k = new RegExp(l); g = k.exec(a); if (g) { g.shift() } if (!g || g.length !== h) { return _.map(function () { p = []; for (var a = 1; 1 <= c ? a <= c : a >= c; 1 <= c ? a++ : a--) { p.push(a) } return p }.apply(this), function () { return "" }) } n = _.sortBy(_.keys(j), function (a, b) { return parseInt(a, 10) }); d = {}; for (f in n) { i = n[f]; e = j[i]; if (d.hasOwnProperty(e)) { continue } d[e] = f } m = []; e = 0; while (e < c) { m.push(g[d[e]]); e++ } return m }; Knockback.FormattedObservable = function () { function a(a, b) { var c, d; this.__kb = {}; if (_.isArray(b)) { a = a; d = b } else { d = Array.prototype.slice.call(arguments, 1) } c = kb.utils.wrappedObservable(this, ko.dependentObservable({ read: function () { var c, e, f; b = [ko.utils.unwrapObservable(a)]; for (e = 0, f = d.length; e < f; e++) { c = d[e]; b.push(ko.utils.unwrapObservable(c)) } return kb.toFormattedString.apply(null, b) }, write: function (b) { var c, e, f, g; e = kb.parseFormattedString(b, ko.utils.unwrapObservable(a)); f = Math.min(d.length, e.length); c = 0; g = []; while (c < f) { d[c](e[c]); g.push(c++) } return g } })); return c } a.name = "FormattedObservable"; a.prototype.destroy = function () { return kb.utils.wrappedObservable(this, null) }; return a }(); Knockback.formattedObservable = function (a, b) { return new Knockback.FormattedObservable(a, Array.prototype.slice.call(arguments, 1)) }; Knockback.LocalizedObservable = function () { function a(a, b, c) { var d; this.value = a; this.options = b != null ? b : {}; this.view_model = c != null ? c : {}; if (!(this.options.read || this.read)) { throw new Error("LocalizedObservable: options.read is missing") } if (this.options.read && this.read) { throw new Error("LocalizedObservable: options.read and read class function exist. You need to choose one.") } if (this.options.write && this.write) { throw new Error("LocalizedObservable: options.write and write class function exist. You need to choose one.") } if (!kb.locale_manager) { throw new Error("LocalizedObservable: Knockback.locale_manager is not defined") } this.__kb = {}; this.__kb._onLocaleChange = _.bind(this._onLocaleChange, this); if (this.value) { a = ko.utils.unwrapObservable(this.value) } this.__kb.value_observable = ko.observable(!a ? this._getDefaultValue() : this.read.call(this, a, null)); if (this.write && !(typeof this.write === "function")) { throw new Error("LocalizedObservable: options.write is not a function for read_write model attribute") } d = kb.utils.wrappedObservable(this, ko.dependentObservable({ read: _.bind(this._onGetValue, this), write: this.write ? _.bind(this._onSetValue, this) : function () { throw new Error("Knockback.LocalizedObservable: value is read only") }, owner: this.view_model })); d.destroy = _.bind(this.destroy, this); d.observedValue = _.bind(this.observedValue, this); d.setToDefault = _.bind(this.setToDefault, this); d.resetToCurrent = _.bind(this.resetToCurrent, this); kb.locale_manager.bind("change", this.__kb._onLocaleChange); return d } a.name = "LocalizedObservable"; a.extend = Backbone.Model.extend; a.prototype.destroy = function () { kb.locale_manager.unbind("change", this.__kb._onLocaleChange); this.__kb.value_observable = null; kb.utils.wrappedObservable(this).dispose(); kb.utils.wrappedObservable(this, null); this.options = {}; this.view_model = null; return this.__kb = null }; a.prototype.setToDefault = function () { var a, b; if (!this["default"]) { return } b = this._getDefaultValue(); a = this.__kb.value_observable(); if (a !== b) { return this._onSetValue(b) } else { return this.__kb.value_observable.valueHasMutated() } }; a.prototype.resetToCurrent = function () { this.__kb.value_observable(null); return this._onSetValue(this._getCurrentValue()) }; a.prototype.observedValue = function (a) { if (arguments.length === 0) { return this.value } this.value = a; this._onLocaleChange(); return this }; a.prototype._getDefaultValue = function () { if (!this["default"]) { return "" } if (typeof this["default"] === "function") { return this["default"]() } else { return this["default"] } }; a.prototype._getCurrentValue = function () { var a; a = kb.utils.wrappedObservable(this); if (!(this.value && a)) { return this._getDefaultValue() } return this.read.call(this, ko.utils.unwrapObservable(this.value)) }; a.prototype._onGetValue = function () { if (this.value) { ko.utils.unwrapObservable(this.value) } return this.__kb.value_observable() }; a.prototype._onSetValue = function (a) { this.write.call(this, a, ko.utils.unwrapObservable(this.value)); a = this.read.call(this, ko.utils.unwrapObservable(this.value)); this.__kb.value_observable(a); if (this.options.onChange) { return this.options.onChange(a) } }; a.prototype._onLocaleChange = function () { var a; a = this.read.call(this, ko.utils.unwrapObservable(this.value)); this.__kb.value_observable(a); if (this.options.onChange) { return this.options.onChange(a) } }; return a }(); Knockback.localizedObservable = function (a, b, c) { return new Knockback.LocalizedObservable(a, b, c) }; Knockback.Observable = function () { function a(a, b, c) { var d, e = this; this.model = a; this.mapping_info = b; this.view_model = c != null ? c : {}; if (!this.model) { throw new Error("Observable: model is missing") } if (!this.mapping_info) { throw new Error("Observable: mapping_info is missing") } if (_.isString(this.mapping_info) || ko.isObservable(this.mapping_info)) { this.mapping_info = { key: this.mapping_info } } if (!this.mapping_info.key) { throw new Error("Observable: mapping_info.key is missing") } this.__kb = {}; this.__kb._onModelChange = _.bind(this._onModelChange, this); this.__kb._onModelLoaded = _.bind(this._onModelLoaded, this); this.__kb._onModelUnloaded = _.bind(this._onModelUnloaded, this); if (this.mapping_info.hasOwnProperty("write") && _.isBoolean(this.mapping_info.write)) { this.mapping_info = _.clone(this.mapping_info); this.mapping_info.read_only = !this.mapping_info.write } if (Backbone.ModelRef && this.model instanceof Backbone.ModelRef) { this.model_ref = this.model; this.model_ref.retain(); this.model_ref.bind("loaded", this.__kb._onModelLoaded); this.model_ref.bind("unloaded", this.__kb._onModelUnloaded); this.model = this.model_ref.getModel() } this.__kb.value_observable = ko.observable(); if (this.mapping_info.localizer) { this.__kb.localizer = new this.mapping_info.localizer(this._getCurrentValue()) } d = kb.utils.wrappedObservable(this, ko.dependentObservable({ read: _.bind(this._onGetValue, this), write: this.mapping_info.read_only ? function () { throw new Error("Knockback.Observable: " + e.mapping_info.key + " is read only") } : _.bind(this._onSetValue, this), owner: this.view_model })); d.destroy = _.bind(this.destroy, this); d.setToDefault = _.bind(this.setToDefault, this); if (!this.model_ref || this.model_ref.isLoaded()) { this.model.bind("change", this.__kb._onModelChange) } return d } a.name = "Observable"; a.prototype.destroy = function () { this.__kb.value_observable = null; kb.utils.wrappedObservable(this).dispose(); kb.utils.wrappedObservable(this, null); if (this.model) { this.__kb._onModelUnloaded(this.model) } if (this.model_ref) { this.model_ref.unbind("loaded", this.__kb._onModelLoaded); this.model_ref.unbind("unloaded", this.__kb._onModelUnloaded); this.model_ref.release(); this.model_ref = null } this.mapping_info = null; this.view_model = null; return this.__kb = null }; a.prototype.setToDefault = function () { var a; a = this._getDefaultValue(); if (this.__kb.localizer) { this.__kb.localizer.observedValue(a); a = this.__kb.localizer() } return this.__kb.value_observable(a) }; a.prototype._getDefaultValue = function () { if (!this.mapping_info.hasOwnProperty("default")) { return "" } if (typeof this.mapping_info["default"] === "function") { return this.mapping_info["default"]() } else { return this.mapping_info["default"] } }; a.prototype._getCurrentValue = function () { var a, b, c, d, e, f; if (!this.model) { return this._getDefaultValue() } c = ko.utils.unwrapObservable(this.mapping_info.key); b = [c]; if (!_.isUndefined(this.mapping_info.args)) { if (_.isArray(this.mapping_info.args)) { f = this.mapping_info.args; for (d = 0, e = f.length; d < e; d++) { a = f[d]; b.push(ko.utils.unwrapObservable(a)) } } else { b.push(ko.utils.unwrapObservable(this.mapping_info.args)) } } if (this.mapping_info.read) { return this.mapping_info.read.apply(this.view_model, b) } else { return this.model.get.apply(this.model, b) } }; a.prototype._onGetValue = function () { var a, b, c, d, e; this.__kb.value_observable(); ko.utils.unwrapObservable(this.mapping_info.key); if (!_.isUndefined(this.mapping_info.args)) { if (_.isArray(this.mapping_info.args)) { e = this.mapping_info.args; for (c = 0, d = e.length; c < d; c++) { a = e[c]; ko.utils.unwrapObservable(a) } } else { ko.utils.unwrapObservable(this.mapping_info.args) } } b = this._getCurrentValue(); if (this.__kb.localizer) { this.__kb.localizer.observedValue(b); b = this.__kb.localizer() } return b }; a.prototype._onSetValue = function (a) { var b, c, d, e, f, g; if (this.__kb.localizer) { this.__kb.localizer(a); a = this.__kb.localizer.observedValue() } if (this.model) { d = {}; d[ko.utils.unwrapObservable(this.mapping_info.key)] = a; c = typeof this.mapping_info.write === "function" ? [a] : [d]; if (!_.isUndefined(this.mapping_info.args)) { if (_.isArray(this.mapping_info.args)) { g = this.mapping_info.args; for (e = 0, f = g.length; e < f; e++) { b = g[e]; c.push(ko.utils.unwrapObservable(b)) } } else { c.push(ko.utils.unwrapObservable(this.mapping_info.args)) } } if (typeof this.mapping_info.write === "function") { this.mapping_info.write.apply(this.view_model, c) } else { this.model.set.apply(this.model, c) } } if (this.__kb.localizer) { return this.__kb.value_observable(this.__kb.localizer()) } else { return this.__kb.value_observable(a) } }; a.prototype._modelBind = function (a) { if (!a) { return } a.bind("change", this.__kb._onModelChange); if (Backbone.RelationalModel && a instanceof Backbone.RelationalModel) { a.bind("add", this.__kb._onModelChange); a.bind("remove", this.__kb._onModelChange); return a.bind("update", this.__kb._onModelChange) } }; a.prototype._modelUnbind = function (a) { if (!a) { return } a.unbind("change", this.__kb._onModelChange); if (Backbone.RelationalModel && a instanceof Backbone.RelationalModel) { a.unbind("add", this.__kb._onModelChange); a.unbind("remove", this.__kb._onModelChange); return a.unbind("update", this.__kb._onModelChange) } }; a.prototype._onModelLoaded = function (a) { this.model = a; this._modelBind(a); return this._updateValue() }; a.prototype._onModelUnloaded = function (a) { if (this.__kb.localizer && this.__kb.localizer.destroy) { this.__kb.localizer.destroy(); this.__kb.localizer = null } this._modelUnbind(a); return this.model = null }; a.prototype._onModelChange = function () { if (this.model && this.model.hasChanged && !this.model.hasChanged(ko.utils.unwrapObservable(this.mapping_info.key))) { return } return this._updateValue() }; a.prototype._updateValue = function () { var a; a = this._getCurrentValue(); if (this.__kb.localizer) { this.__kb.localizer.observedValue(a); a = this.__kb.localizer() } return this.__kb.value_observable(a) }; return a }(); Knockback.observable = function (a, b, c) { return new Knockback.Observable(a, b, c) }; Knockback.Observables = function () { function a(a, b, c, d) { var e, f, g, h, i, j; if (!a) { throw new Error("Observables: model is missing") } if (!b || !_.isObject(b)) { throw new Error("Observables: mappings_info is missing") } this.__kb || (this.__kb = {}); this.__kb.model = a; this.__kb.mappings_info = b; this.__kb.view_model = _.isUndefined(c) ? this : c; if (!_.isUndefined(d) && d.hasOwnProperty("write")) { kb.utils.legacyWarning("Knockback.Observables option.write", "0.16.0", "Now default is writable so only supply read_only as required"); d.read_only = !d.write; delete d["write"] } if (!_.isUndefined(d)) { h = _.isBoolean(d) ? d : d.read_only; i = this.__kb.mappings_info; for (g in i) { f = i[g]; e = _.isString(f); if (e) { f = !_.isUndefined(h) ? { key: f, read_only: h } : { key: f } } else if (!_.isUndefined(h) && !(f.hasOwnProperty("read_only") || f.hasOwnProperty("write"))) { f.read_only = h } if (!f.hasOwnProperty("key")) { f.key = g } this[g] = this.__kb.view_model[g] = kb.observable(this.__kb.model, f, this.__kb.view_model) } } else { j = this.__kb.mappings_info; for (g in j) { f = j[g]; if (f.hasOwnProperty("write")) { kb.utils.legacyWarning("Knockback.Observables option.write", "0.16.0", "Now default is writable so only supply read_only as required") } if (!f.hasOwnProperty("key")) { f.key = g } this[g] = this.__kb.view_model[g] = kb.observable(this.__kb.model, f, this.__kb.view_model) } } } a.name = "Observables"; a.prototype.destroy = function () { var a, b, c; c = this.__kb.mappings_info; for (b in c) { a = c[b]; if (this.__kb.view_model[b]) { this.__kb.view_model[b].destroy() } this.__kb.view_model[b] = null; this[b] = null } this.__kb.view_model = null; this.__kb.mappings_info = null; return this.__kb.model = null }; a.prototype.setToDefault = function () { var a, b, c, d; c = this.__kb.mappings_info; d = []; for (b in c) { a = c[b]; d.push(this.__kb.view_model[b].setToDefault()) } return d }; return a }(); Knockback.observables = function (a, b, c, d) { return new Knockback.Observables(a, b, c, d) }; Knockback.TriggeredObservable = function () { function a(a, b) { var c; this.model = a; this.event_name = b; if (!this.model) { throw new Error("Observable: model is missing") } if (!this.event_name) { throw new Error("Observable: event_name is missing") } this.__kb = {}; this.__kb._onValueChange = _.bind(this._onValueChange, this); this.__kb._onModelLoaded = _.bind(this._onModelLoaded, this); this.__kb._onModelUnloaded = _.bind(this._onModelUnloaded, this); if (Backbone.ModelRef && this.model instanceof Backbone.ModelRef) { this.model_ref = this.model; this.model_ref.retain(); this.model_ref.bind("loaded", this.__kb._onModelLoaded); this.model_ref.bind("unloaded", this.__kb._onModelUnloaded); this.model = this.model_ref.getModel() } this.__kb.value_observable = ko.observable(); c = kb.utils.wrappedObservable(this, ko.dependentObservable(_.bind(this._onGetValue, this))); c.destroy = _.bind(this.destroy, this); if (!this.model_ref || this.model_ref.isLoaded()) { this._onModelLoaded(this.model) } return c } a.name = "TriggeredObservable"; a.prototype.destroy = function () { kb.utils.wrappedObservable(this).dispose(); kb.utils.wrappedObservable(this, null); this.__kb.value_observable = null; if (this.model) { this._onModelUnloaded(this.model) } if (this.model_ref) { this.model_ref.unbind("loaded", this.__kb._onModelLoaded); this.model_ref.unbind("unloaded", this.__kb._onModelUnloaded); this.model_ref.release(); this.model_ref = null } this.options = null; this.view_model = null; return this.__kb = null }; a.prototype._onGetValue = function () { return this.__kb.value_observable() }; a.prototype._onModelLoaded = function (a) { this.model = a; this.model.bind(this.event_name, this.__kb._onValueChange); return this._onValueChange() }; a.prototype._onModelUnloaded = function () { if (this.__kb.localizer && this.__kb.localizer.destroy) { this.__kb.localizer.destroy(); this.__kb.localizer = null } this.model.unbind(this.event_name, this.__kb._onValueChange); return this.model = null }; a.prototype._onValueChange = function () { var a; a = this.__kb.value_observable(); if (a !== this.model) { return this.__kb.value_observable(this.model) } else { return this.__kb.value_observable.valueHasMutated() } }; return a }(); Knockback.triggeredObservable = function (a, b) { return new Knockback.TriggeredObservable(a, b) }; var __hasProp = {}.hasOwnProperty, __extends = function (a, b) { function d() { this.constructor = a } for (var c in b) { if (__hasProp.call(b, c)) a[c] = b[c] } d.prototype = b.prototype; a.prototype = new d; a.__super__ = b.prototype; return a }; Knockback.AttributeConnector = function () { function a(a, b, c) { var d; this.key = b; this.options = c != null ? c : {}; kb.utils.wrappedModel(this, a); this.options = _.clone(this.options); this.__kb.value_observable = ko.observable(); d = kb.utils.wrappedObservable(this, ko.dependentObservable({ read: _.bind(this.read, this), write: _.bind(this.write, this) })); d.destroy = _.bind(this.destroy, this); d.model = _.bind(this.model, this); d.update = _.bind(this.update, this); this.__kb.initializing = true; this.update(); this.__kb.initializing = false; return d } a.name = "AttributeConnector"; a.prototype.destroy = function () { this.__kb.value_observable = null; kb.utils.wrappedObservable(this).dispose(); return kb.utils.wrappedObservable(this, null) }; a.prototype.read = function () { return this.__kb.value_observable() }; a.prototype.write = function (a) { var b, c; b = kb.utils.wrappedModel(this); if (!b) { return } if (this.options.read_only) { if (!this.__kb.initializing) { throw "Cannot write a value to a dependentObservable unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters." } } else { c = {}; c[this.key] = a; return b.set(c) } }; a.prototype.model = function (a) { var b; b = kb.utils.wrappedModel(this); if (arguments.length === 0) { return b } if (b === a) { return } kb.utils.wrappedModel(this, a); return this.update() }; a.inferType = function (a, b) { var c, d; d = a.get(b); if (!d) { if (!(Backbone.RelationalModel && a instanceof Backbone.RelationalModel)) { return "simple" } c = _.find(a.getRelations(), function (a) { return a.key === b }); if (!c) { return "simple" } if (c.collectionKey) { return "collection" } else { return "model" } } if (d instanceof Backbone.Collection) { return "collection" } if (d instanceof Backbone.Model || Backbone.ModelRef && d instanceof Backbone.ModelRef) { return "model" } return "simple" }; a.createByType = function (a, b, c, d) { var e; switch (a) { case "collection": e = d ? _.clone(d) : {}; if (!(d.view_model || d.view_model_create || d.children || d.create)) { e.view_model = kb.ViewModel } if (d.store) { d.store.addResolverToOptions(e, b.get(c)) } return kb.collectionAttributeConnector(b, c, e); case "model": e = d ? _.clone(d) : {}; if (!e.options) { e.options = {} } if (!(d.view_model || d.view_model_create || d.children || d.create)) { e.view_model = kb.ViewModel } if (d.store) { d.store.addResolverToOptions(e.options, b.get(c)) } return kb.viewModelAttributeConnector(b, c, e); default: return kb.simpleAttributeConnector(b, c, d) } }; a.createOrUpdate = function (a, b, c, d) { var e, f; if (a) { if (kb.utils.observableInstanceOf(a, kb.AttributeConnector)) { if (a.model() !== b) { a.model(b) } else { a.update() } } return a } if (!b) { return kb.simpleAttributeConnector(b, c, d) } if (d.hasOwnProperty("create")) { if (!d.create) { throw new Error("Knockback.AttributeConnector: options.create is empty") } return d.create(b, c, d.options || {}) } f = b.get(c); if (d.hasOwnProperty("view_model")) { if (!d.view_model) { throw new Error("Knockback.AttributeConnector: options.view_model is empty") } return new d.view_model(f, d.options || {}) } else if (d.hasOwnProperty("view_model_create")) { if (!d.view_model_create) { throw new Error("Knockback.AttributeConnector: options.view_model_create is empty") } return d.view_model_create(f, d.options || {}) } else if (d.hasOwnProperty("children")) { if (!d.children) { throw new Error("Knockback.AttributeConnector: options.children is empty") } if (typeof d.children === "function") { e = { view_model: d.children } } else { e = d.children || {} } return kb.collectionAttributeConnector(b, c, e) } return this.createByType(this.inferType(b, c), b, c, d) }; return a }(); Knockback.SimpleAttributeConnector = function (a) { function b() { b.__super__.constructor.apply(this, arguments); return kb.utils.wrappedObservable(this) } __extends(b, a); b.name = "SimpleAttributeConnector"; b.prototype.destroy = function () { this.current_value = null; return b.__super__.destroy.apply(this, arguments) }; b.prototype.update = function () { var a, b, c; b = kb.utils.wrappedModel(this); if (!b) { return } c = b.get(this.key); a = this.__kb.value_observable(); if (!_.isEqual(a, c)) { return this.__kb.value_observable(c) } }; b.prototype.write = function (a) { var c; c = kb.utils.wrappedModel(this); if (!c) { this.__kb.value_observable(a); return } return b.__super__.write.apply(this, arguments) }; return b }(Knockback.AttributeConnector); Knockback.simpleAttributeConnector = function (a, b, c) { return new Knockback.SimpleAttributeConnector(a, b, c) }; Knockback.CollectionAttributeConnector = function (a) { function b() { b.__super__.constructor.apply(this, arguments); return kb.utils.wrappedObservable(this) } __extends(b, a); b.name = "CollectionAttributeConnector"; b.prototype.destroy = function () { var a; a = this.__kb.value_observable(); if (a && typeof a.refCount === "function" && a.refCount() > 0) { a.release() } return b.__super__.destroy.apply(this, arguments) }; b.prototype.update = function () { var a, b, c, d = this; b = kb.utils.wrappedModel(this); if (!b) { return } c = b.get(this.key); a = this.__kb.value_observable(); if (!a) { if (this.options.store) { return this.__kb.value_observable(this.options.store.resolveValue(c, function () { return kb.collectionObservable(c, d.options) })) } else { return this.__kb.value_observable(kb.collectionObservable(c, this.options)) } } else { if (a.collection() !== c) { a.collection(c); return this.__kb.value_observable.valueHasMutated() } } }; b.prototype.read = function () { var a; a = this.__kb.value_observable(); if (a) { return a() } else { return } }; return b }(Knockback.AttributeConnector); Knockback.collectionAttributeConnector = function (a, b, c) { return new Knockback.CollectionAttributeConnector(a, b, c) }; Knockback.ViewModelAttributeConnector = function (a) { function b() { b.__super__.constructor.apply(this, arguments); return kb.utils.wrappedObservable(this) } __extends(b, a); b.name = "ViewModelAttributeConnector"; b.prototype.destroy = function () { var a; a = this.__kb.value_observable(); if (a && typeof a.refCount === "function" && a.refCount() > 0) { a.release() } return b.__super__.destroy.apply(this, arguments) }; b.prototype.update = function () { var a, b, c, d, e = this; b = kb.utils.wrappedModel(this); if (!b) { return } c = b.get(this.key); a = this.__kb.value_observable(); if (!a) { d = this.options.options ? _.clone(this.options.options) : {}; if (d.store) { return this.__kb.value_observable(d.store.resolveValue(c, function () { if (e.options.view_model) { return new e.options.view_model(c, d) } else { return e.options.view_model_create(c, d) } })) } else { return this.__kb.value_observable(this.options.view_model ? new this.options.view_model(c, d) : this.options.view_model_create(c, d)) } } else { if (!(a.model && typeof a.model === "function")) { throw new Error("Knockback.viewModelAttributeConnector: unknown how to model a view model") } if (a.model() !== c) { a.model(c); return this.__kb.value_observable.valueHasMutated() } } }; return b }(Knockback.AttributeConnector); Knockback.viewModelAttributeConnector = function (a, b, c) { return new Knockback.ViewModelAttributeConnector(a, b, c) }; var __hasProp = {}.hasOwnProperty, __extends = function (a, b) { function d() { this.constructor = a } for (var c in b) { if (__hasProp.call(b, c)) a[c] = b[c] } d.prototype = b.prototype; a.prototype = new d; a.__super__ = b.prototype; return a }; Knockback.ViewModel_RCBase = function (a) { function b() { return b.__super__.constructor.apply(this, arguments) } __extends(b, a); b.name = "ViewModel_RCBase"; b.prototype.__destroy = function () { var a, b, c; c = []; for (a in this) { b = this[a]; if (!b || a === "__kb") { continue } if (kb.utils.release(b)) { c.push(this[a] = null) } else { c.push(void 0) } } return c }; return b }(Knockback.RefCountable); Knockback.ViewModel = function (a) { function b(a, c) { var d, e, f, g; if (c == null) { c = {} } b.__super__.constructor.apply(this, arguments); if (Knockback.stats_on) { kb.stats.view_models++ } if (!c.store_skip_resolve) { kb.Store.resolveFromOptions(c, this) } if (c.store) { this.__kb.store = c.store } else { this.__kb.store = new kb.Store; this.__kb.store_is_owned = true } this.__kb._onModelChange = _.bind(this._onModelChange, this); this.__kb._onModelLoaded = _.bind(this._onModelLoaded, this); this.__kb._onModelUnloaded = _.bind(this._onModelUnloaded, this); this.__kb.internals = c.internals; this.__kb.requires = c.requires; this.__kb.children = c.children; this.__kb.create = c.create; this.__kb.read_only = c.read_only; kb.utils.wrappedModel(this, a); if (Backbone.ModelRef && a instanceof Backbone.ModelRef) { this.__kb.model_ref = a; this.__kb.model_ref.retain(); kb.utils.wrappedModel(this, this.__kb.model_ref.getModel()); this.__kb.model_ref.bind("loaded", this.__kb._onModelLoaded); this.__kb.model_ref.bind("unloaded", this.__kb._onModelUnloaded) } if (this.__kb.model) { this._onModelLoaded(this.__kb.model) } if (!this.__kb.internals && !this.__kb.requires) { return this } e = _.union(this.__kb.internals ? this.__kb.internals : [], this.__kb.requires ? this.__kb.requires : []); if (!this.__kb.model_ref || this.__kb.model_ref.isLoaded()) { e = _.difference(e, _.keys(this.__kb.model.attributes)) } for (f = 0, g = e.length; f < g; f++) { d = e[f]; this._updateAttributeConnector(this.__kb.model, d) } } __extends(b, a); b.name = "ViewModel"; b.prototype.__destroy = function () { var a; a = this.__kb.model; kb.utils.wrappedModel(this, null); this._modelUnbind(a); if (this.__kb.store_is_owned) { this.__kb.store.destroy() } this.__kb.store = null; b.__super__.__destroy.apply(this, arguments); if (Knockback.stats_on) { return kb.stats.view_models-- } }; b.prototype.model = function (a) { var b; b = kb.utils.wrappedModel(this); if (arguments.length === 0) { return b } if (a === b) { return } if (b) { this._onModelUnloaded(b) } if (a) { return this._onModelLoaded(a) } }; b.prototype._modelBind = function (a) { if (!a) { return } a.bind("change", this.__kb._onModelChange); if (Backbone.RelationalModel && a instanceof Backbone.RelationalModel) { a.bind("add", this.__kb._onModelChange); a.bind("remove", this.__kb._onModelChange); return a.bind("update", this.__kb._onModelChange) } }; b.prototype._modelUnbind = function (a) { if (!a) { return } a.unbind("change", this.__kb._onModelChange); if (Backbone.RelationalModel && a instanceof Backbone.RelationalModel) { a.unbind("add", this.__kb._onModelChange); a.unbind("remove", this.__kb._onModelChange); return a.unbind("update", this.__kb._onModelChange) } }; b.prototype._onModelLoaded = function (a) { var b, c; kb.utils.wrappedModel(this, a); this._modelBind(a); c = []; for (b in this.__kb.model.attributes) { c.push(this._updateAttributeConnector(this.__kb.model, b)) } return c }; b.prototype._onModelUnloaded = function (a) { var b, c; this._modelUnbind(a); kb.utils.wrappedModel(this, null); c = []; for (b in a.attributes) { c.push(this._updateAttributeConnector(null, b)) } return c }; b.prototype._onModelChange = function () { var a, b, c; if (this.__kb.model._changed) { b = []; for (a in this.__kb.model.attributes) { b.push(this.__kb.model.hasChanged(a) ? this._updateAttributeConnector(this.__kb.model, a) : void 0) } return b } else if (this.__kb.model.changed) { c = []; for (a in this.__kb.model.changed) { c.push(this._updateAttributeConnector(this.__kb.model, a)) } return c } }; b.prototype._updateAttributeConnector = function (a, b) { var c; c = this.__kb.internals && _.contains(this.__kb.internals, b) ? "_" + b : b; return this[c] = kb.AttributeConnector.createOrUpdate(this[c], a, b, this._createOptions(b)) }; b.prototype._createOptions = function (a) { var b; if (this.__kb.children) { if (this.__kb.children.hasOwnProperty(a)) { b = this.__kb.children[a]; if (typeof b === "function") { b = { view_model: b } } b.options = { read_only: this.__kb.read_only, store: this.__kb.store }; return b } else if (this.__kb.children.hasOwnProperty("create")) { return { create: this.__kb.children.create, options: { read_only: this.__kb.read_only, store: this.__kb.store } } } } else if (this.__kb.create) { return { create: this.__kb.create, options: { read_only: this.__kb.read_only, store: this.__kb.store } } } return { read_only: this.__kb.read_only, store: this.__kb.store } }; return b }(Knockback.ViewModel_RCBase); Knockback.viewModel = function (a, b) { return new Knockback.ViewModel(a, b) }